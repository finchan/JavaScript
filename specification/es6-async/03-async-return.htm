<script>
    async function f() {
        return 'Hello world'
    }

    f().then(v => {
        console.log(v)
    })

    async function f2() {
        throw new Error('Error')
    }

    f2().then(null, e => console.log(e.message))

    async function getTitle(url) {
        let response = await fetch(url)
        let html = await response.text()
        return html
    }
    getTitle("https://api.github.com/users/github")
        .then(console.log)

    async function f3() {
        //  等同于
        //  return 123
        return await 123
    }
    f3().then(v=>console.log(v))

    class Sleep{
        constructor(timeout){
            this.timeout = timeout
        }
        then(resolve, reject) {
            const startTime = Date.now()
            setTimeout(()=>{
                resolve(Date.now()-startTime)
            }, this.timeout)
        }
    }
    (async ()=>{
        const sleepTime = await new Sleep(1000)
        console.log(sleepTime)
    })()

    function sleep(interval) {
        return new Promise(resolve=>{
            setTimeout(resolve, interval)
        })
    }
    async function one2FiveInAsync() {
        for(let i = 0; i< 5; i++) {
            console.log(i+1)
            await sleep(1000)
        }
    }
    one2FiveInAsync()

    async function f4() {
        await Promise.reject('Error')
    }
    f4()
        .then(v=>console.log(v))
        .catch(e=>console.log(e))
</script>
